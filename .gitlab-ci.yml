image: $REPO_URL/stage

services:
  - docker:dind

stages:
  - build
  - test
  - e2e
  - release
  - deployment

variables:
  DOCKER_HOST: tcp://localhost:2375/
  BASE_IMAGE_NAME: polyswarmd

before_script:
  - apk --no-cache add curl jq

###############################################################
# Build Stage (jobs inside a stage run in parallel)
###############################################################

# triggers itself in a new pipeline with the MANUAL_IMAGE_TAG=manual-tag
self-trigger-with-manual-tag:
  stage: build
  tags:
    - kube
  script:
    - >-
      curl
      --request POST
      --form "token=$CI_JOB_TOKEN"
      --form "variables[MANUAL_IMAGE_TAG]=manual-tag"
      --form ref=$CI_COMMIT_REF_NAME
      "https://gitlab.polyswarm.io/api/v4/projects/$CI_PROJECT_ID/trigger/pipeline"
  when: manual


build:
  stage: build
  tags:
    - kube
  script:
    - docker pull $REPO_URL/$BASE_IMAGE_NAME:latest || true
    - docker build -t $REPO_URL/$BASE_IMAGE_NAME:${MANUAL_IMAGE_TAG:-$CI_COMMIT_SHA} -f docker/Dockerfile --cache-from=$REPO_URL/$BASE_IMAGE_NAME:latest .
    - docker push $REPO_URL/$BASE_IMAGE_NAME:${MANUAL_IMAGE_TAG:-$CI_COMMIT_SHA}

###############################################################
# Test Stage
###############################################################

test:
  tags:
    - kube
  stage: test
  script:
    - echo "Still to be implemented"

###############################################################
# End-to-end Stage
###############################################################

e2e:
  stage: e2e
  tags:
    - kube
  script:
    - pip install $END_TO_END_LIB
    - e2e init
    - E2E_FORCE_TAGS=$MANUAL_IMAGE_TAG e2e run

###############################################################
# Release Stage
###############################################################

release-latest:
  stage: release
  tags:
    - kube
  only:
    - master
  script:
    # Gets the current image that was built in the CI for this commit
    - docker pull $REPO_URL/$BASE_IMAGE_NAME:${MANUAL_IMAGE_TAG:-$CI_COMMIT_SHA}
    # Creates new tags for this image, one that should go to AWS and another to DockerHub with the tag "latest"
    - docker tag $REPO_URL/$BASE_IMAGE_NAME:${MANUAL_IMAGE_TAG:-$CI_COMMIT_SHA} $REPO_URL/$BASE_IMAGE_NAME:latest
    - docker tag $REPO_URL/$BASE_IMAGE_NAME:${MANUAL_IMAGE_TAG:-$CI_COMMIT_SHA} polyswarm/$BASE_IMAGE_NAME:latest
    # Pushes to AWS
    - docker push $REPO_URL/$BASE_IMAGE_NAME:latest
    # Pushes to DockerHub
    - docker logout
    - docker login -u $CI_CUSTOM_DOCKER_HUB_USERNAME -p $CI_CUSTOM_DOCKER_HUB_PASSWORD
    - docker push polyswarm/$BASE_IMAGE_NAME:latest

release-tag:
  stage: release
  tags:
    - kube
  only:
    - tags
  script:
    # Gets the current image that was built in the CI for this commit
    - docker pull $REPO_URL/$BASE_IMAGE_NAME:${MANUAL_IMAGE_TAG:-$CI_COMMIT_SHA}
    # Creates new tags for this image, one that should go to AWS and another to DockerHub with the tag from git
    - docker tag $REPO_URL/$BASE_IMAGE_NAME:${MANUAL_IMAGE_TAG:-$CI_COMMIT_SHA} $REPO_URL/$BASE_IMAGE_NAME:$(git describe --tags --abbrev=0)
    - docker tag $REPO_URL/$BASE_IMAGE_NAME:${MANUAL_IMAGE_TAG:-$CI_COMMIT_SHA} polyswarm/$BASE_IMAGE_NAME:$(git describe --tags --abbrev=0)
    # Pushes to AWS
    - docker push $REPO_URL/$BASE_IMAGE_NAME:$(git describe --tags --abbrev=0)
    # Pushes to DockerHub
    - docker logout
    - docker login -u $CI_CUSTOM_DOCKER_HUB_USERNAME -p $CI_CUSTOM_DOCKER_HUB_PASSWORD
    - docker push polyswarm/$BASE_IMAGE_NAME:$(git describe --tags --abbrev=0)


###############################################################
# Deployment Stage
###############################################################
