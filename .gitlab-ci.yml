image: $REPO_URL/stage

services:
  - docker:dind

stages:
  - build
  - test
  - e2e
  - release
  - deployment

variables:
  DOCKER_HOST: tcp://localhost:2375/

before_script:
  - apk --no-cache add curl jq

###############################################################
# Build Stage (jobs inside a stage run in parallel)
###############################################################

build:
  stage: build
  tags:
    - kube
  script:
    - docker pull $REPO_URL/polyswarmd:latest || true
    - docker build -t $REPO_URL/polyswarmd:$CI_COMMIT_SHA -f docker/Dockerfile --cache-from=$REPO_URL/polyswarmd:latest .
    - docker push $REPO_URL/polyswarmd:$CI_COMMIT_SHA

###############################################################
# Test Stage
###############################################################

test:
  tags:
    - kube
  stage: test
  script:
    - echo "Still to be implemented"

###############################################################
# End-to-end Stage
###############################################################

e2e:
    tags:
      - kube
    # FIXME in place while e2e chokes on tags
    except:
      - tags
    stage: e2e
    script:
      - set -e

      # kick e2e
      - >-
        E2E_PIPELINE_ID=`curl
        --silent
        --request POST
        --form "token=$CI_JOB_TOKEN"
        --form "variables[SOURCE_PROJECT]=$CI_PROJECT_NAMESPACE/$CI_PROJECT_NAME"
        --form "variables[SOURCE_BRANCH]=$CI_COMMIT_REF_NAME"
        --form ref=master
        "https://gitlab.polyswarm.io/api/v4/projects/${CI_CUSTOM_PROJECT_ID_E2E}/trigger/pipeline" | jq -r ".id"`

      # poll for it to finish
      - >-
        while [ -z $PIPELINE_STATUS ] || [ $PIPELINE_STATUS = "pending" ] || [ $PIPELINE_STATUS = "running" ]; do
          PIPELINE_STATUS=`curl \
            --silent \
            --header "PRIVATE-TOKEN: $CI_CUSTOM_CI_PAT" \
            "https://gitlab.polyswarm.io/api/v4/projects/${CI_CUSTOM_PROJECT_ID_E2E}/pipelines/$E2E_PIPELINE_ID" | jq -r ".status"`
          echo "waiting for e2e pipeline ...";
          sleep 5;
        done

      # check for success
      - >-
        if [ $PIPELINE_STATUS != "success" ]; then
          echo "failure further down the pipeline"
          exit 1
        fi

###############################################################
# Release Stage
###############################################################

release-latest:
  stage: release
  tags:
    - kube
  only:
    - master
  script:
    # Gets the current image that was built in the CI for this commit
    - docker pull $REPO_URL/polyswarmd:$CI_COMMIT_SHA"
    # Creates new tags for this image, one that should go to AWS and another to DockerHub with the tag "latest"
    - docker tag "$REPO_URL/polyswarmd:$CI_COMMIT_SHA" "$REPO_URL/polyswarmd:latest" "polyswarm/polyswarmd:latest"
    # Pushes to AWS
    - docker push "$REPO_URL/polyswarmd:latest"
    # Pushes to DockerHub
    - docker logout
    - docker login -u "$CI_CUSTOM_DOCKER_HUB_USERNAME" -p "$CI_CUSTOM_DOCKER_HUB_PASSWORD"
    - docker push "polyswarm/polyswarmd:latest"

release-tag:
  stage: release
  tags:
    - kube
  only:
    - tags
  script:
    # Gets the current image that was built in the CI for this commit
    - docker pull $REPO_URL/polyswarmd:$CI_COMMIT_SHA"
    # Creates new tags for this image, one that should go to AWS and another to DockerHub with the tag from git
    - docker tag "$REPO_URL/polyswarmd:$CI_COMMIT_SHA" "$REPO_URL/polyswarmd:$(git describe --tags --abbrev=0)" "polyswarm/polyswarmd:$(git describe --tags --abbrev=0)"
    # Pushes to AWS
    - docker push "$REPO_URL/polyswarmd:$(git describe --tags --abbrev=0)"
    # Pushes to DockerHub
    - docker logout
    - docker login -u "$CI_CUSTOM_DOCKER_HUB_USERNAME" -p "$CI_CUSTOM_DOCKER_HUB_PASSWORD"
    - docker push "polyswarm/polyswarmd:$(git describe --tags --abbrev=0)"


###############################################################
# Deployment Stage
###############################################################
